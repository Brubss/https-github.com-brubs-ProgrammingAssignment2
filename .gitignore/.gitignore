## caching the inverse of a matrix

## Matrix inversion may be some benefit to caching the inverse of a matrix 
## rather than compute it repeatedly
## The function "makeCacheMatrix" will create an square matrix
## This function will create an square matrix and will return a list the "parameters"






     makeCacheMatrix <- function(x = matrix()) {
           inv <- NULL
           set <- function(y){
              x <<- y
              inv <<- NULl
        }
        get <- function() X
        setinverse <- function(inverse) inv <<- inverse
        getinverse <- function() inv
        list(set = set, get = get,
             setinverse = setinverse,
             getinverse = getinverse)
}


## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above. 
## If the inverse has already been calculated (and the matrix has not changed)
## then the cachesolve should retrieve the inverse from the cache.
## Computing the inverse of a square matrix can be done with the solve function in R





   cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
     inv <- x$getinverse()
     if(!is.null(inv)) {
           message("getting cached data")
           return(inv)
        }
        data <- x$get()
        inv <- solve(data, ...)
        x$setinverse(inv)
        inv
}
